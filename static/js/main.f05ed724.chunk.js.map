{"version":3,"sources":["common/Parser.ts","features/calculator/calculatorSlice.ts","features/calculator/Calculator.tsx","features/graphic/Graph.ts","features/graphic/Graphic.tsx","features/wolfram/WolframPlot.tsx","features/wolfram/api/Wolfram.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["ParserImpl","variables","expression","this","replace","_parse","result","parseFloat","_evalOperation","mathSymbol","jsOperation","_brackets","_getVariable","_getNumber","opSymbols","getNumberFunc","number","newStr","isSymbolPresent","forEach","opSymbol","startsWith","_number","_newStr","eval","str","_getSign","sign","unsignedStr","variable","name","value","i","length","element","match","resultStr","calculatorSlice","createSlice","initialState","min","max","calcType","reducers","calculate","state","action","payload","changeCalculator","actions","selectExpression","calculator","selectMin","selectMax","selectCalcType","useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","Calculator","classes","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","onSubmit","values","validate","errors","className","id","noValidate","autoComplete","handleSubmit","TextField","required","label","onChange","handleChange","error","helperText","type","variant","color","Graph","heigth","ctx","canvasWidth","canvasHeigth","graphWidth","graphHeigth","scaleX","scaleY","canvas","getContext","fillStyle","_drawAxis","x","y","beginPath","moveTo","lineTo","stroke","font","rigthMarkerX","leftMarkerX","rigthMarkerY","leftMarkerY","leftMarkerText","rightMarkerText","Math","abs","fillText","clearRect","parser","maxX","step","coordinates","maxY","evaluate","push","newCoordinates","_cutBreakpoint","map","undefined","_convertXY","canvasX","canvasY","slice","index","elements","Graphic","canvasRef","useRef","graph","useEffect","setCanvas","current","plot","style","padding","ref","height","WolframPlot","useState","wolframResult","setWolframResult","isLoading","setIsLoading","setError","cleanupFunction","url","axios","get","params","then","response","data","getGraph","catch","reason","message","finally","CircularProgress","Alert","severity","src","imgSrc","imgWidth","imgHeigth","alt","App","FormControl","component","FormLabel","RadioGroup","aria-label","event","target","FormControlLabel","control","Radio","store","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f05ed724.chunk.js","sourcesContent":["export interface Parser {\r\n  evaluate(expression: string): number;\r\n}\r\n\r\ninterface Operation {\r\n  mathSymbol: string;\r\n  jsOperation: string;\r\n}\r\n\r\ninterface Variable {\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport default class ParserImpl implements Parser {\r\n  variables?: Variable[];\r\n\r\n  evaluate(expression: string, variables?: Variable[]): number {\r\n    this.variables = variables;\r\n\r\n    expression = expression.replace(/\\s+/g, \"\"); // remove all spaces\r\n\r\n    const [result] = this._parse(expression);\r\n\r\n    return parseFloat(result);\r\n  }\r\n\r\n  /*************/\r\n  _parse(expression: string): [string, string] {\r\n    const result = this._evalOperation(\r\n      expression,\r\n      [\r\n        { mathSymbol: \"+\", jsOperation: \"+\" },\r\n        { mathSymbol: \"-\", jsOperation: \"-\" },\r\n      ],\r\n      (expression) => {\r\n        return this._evalOperation(\r\n          expression,\r\n          [\r\n            { mathSymbol: \"*\", jsOperation: \"*\" },\r\n            { mathSymbol: \"/\", jsOperation: \"/\" },\r\n            { mathSymbol: \"%\", jsOperation: \"%\" },\r\n          ],\r\n          (expression) => {\r\n            return this._evalOperation(\r\n              expression,\r\n              [{ mathSymbol: \"^\", jsOperation: \"**\" }],\r\n              (expression) => {\r\n                return this._brackets(expression, (expression) => {\r\n                  return this._getVariable(expression, (expression) => {\r\n                    return this._getNumber(expression);\r\n                  });\r\n                });\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  _evalOperation(expression: string, opSymbols: Operation[], getNumberFunc): [string, string] {\r\n    let result;\r\n\r\n    let [number, newStr] = getNumberFunc(expression);\r\n    result = number;\r\n\r\n    while (newStr) {\r\n      let isSymbolPresent = false;\r\n      opSymbols.forEach((opSymbol) => {\r\n        if (newStr.startsWith(opSymbol.mathSymbol)) {\r\n          newStr = newStr.replace(opSymbol.mathSymbol, \"\");\r\n          let [_number, _newStr] = getNumberFunc(newStr);\r\n          result = eval(`(${result})${opSymbol.jsOperation}(${_number})`);\r\n          newStr = _newStr;\r\n          isSymbolPresent = true;\r\n        }\r\n      });\r\n\r\n      if (!isSymbolPresent) break;\r\n    }\r\n\r\n    return [result, newStr];\r\n  }\r\n\r\n  _brackets(str: string, getNumberFunc): [string, string] {\r\n    let [sign, unsignedStr] = this._getSign(str);    \r\n\r\n    if (unsignedStr.startsWith(\"(\")) {\r\n      unsignedStr = unsignedStr.replace(\"(\", \"\");\r\n      let [result, newStr] = this._parse(unsignedStr);\r\n      if (newStr.startsWith(\")\")) {\r\n        newStr = newStr.replace(\")\", \"\");\r\n        [sign, result] = this._getSign(sign + result)\r\n        return [sign + result, newStr];\r\n      } else {\r\n        throw \"Missing rigth bracket!\";\r\n      }\r\n    } else {\r\n      return getNumberFunc(str);\r\n    }\r\n  }\r\n\r\n  _getVariable(str: string, getNumberFunc): [string, string] {\r\n    let [sign, newStr] = this._getSign(str);    \r\n\r\n    if (this.variables) {\r\n      for (const variable of this.variables) {\r\n        if (newStr.startsWith(variable.name)) {\r\n          newStr = newStr.replace(variable.name, \"\");\r\n          let value;\r\n          [sign, value] = this._getSign(sign + variable.value);\r\n          return [sign + value, newStr];\r\n        }\r\n      }\r\n    }\r\n\r\n    return getNumberFunc(str);\r\n  }\r\n\r\n  _getNumber(str: string): [string, string] {\r\n    let number = \"\";\r\n    let [sign, newStr] = this._getSign(str);\r\n\r\n    for (let i = 0; i < newStr.length; i++) {\r\n      const element = newStr[i];\r\n      if (element.match(\"[.0-9]\")) {\r\n        number += element;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    newStr = newStr.replace(number, \"\");\r\n    return [sign + number, newStr];\r\n  }\r\n\r\n  _getSign(str: string): [string, string] {\r\n    let sign = \"\";\r\n    let resultStr = str;\r\n\r\n    let i = 0;\r\n    while (\"-\" === str[i]) {\r\n      i++;\r\n      resultStr = resultStr.replace(\"-\", \"\");\r\n    }\r\n\r\n    if (1 === i % 2) {\r\n      sign = \"-\";\r\n    }\r\n\r\n    return [sign, resultStr];\r\n  }\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\n\r\ninterface CalculatorState {\r\n  expression: string;\r\n  min: number;\r\n  max: number;\r\n  calcType: string;\r\n}\r\n\r\nconst initialState: CalculatorState = {\r\n  expression: \"x^2\",\r\n  min: -10,\r\n  max: 10,\r\n  calcType: \"custom\",\r\n};\r\n\r\nexport const calculatorSlice = createSlice({\r\n  name: \"calculator\",\r\n  initialState,\r\n  reducers: {\r\n    calculate: (state, action) => {\r\n      state.expression = action.payload.expression;\r\n      state.min = action.payload.min;\r\n      state.max = action.payload.max;\r\n    },\r\n    changeCalculator: (state, action) => {\r\n      state.calcType = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { calculate } = calculatorSlice.actions;\r\n\r\nexport const { changeCalculator } = calculatorSlice.actions;\r\n\r\nexport const selectExpression = (state: RootState) => state.calculator.expression;\r\nexport const selectMin = (state: RootState) => state.calculator.min;\r\nexport const selectMax = (state: RootState) => state.calculator.max;\r\nexport const selectCalcType = (state: RootState) => state.calculator.calcType;\r\n\r\nexport default calculatorSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { calculate, selectExpression, selectMax, selectMin } from \"./calculatorSlice\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"& .MuiTextField-root\": {\r\n        margin: theme.spacing(1),\r\n        width: \"25ch\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nexport function Calculator() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const expression = useSelector(selectExpression);\r\n  const min = useSelector(selectMin);\r\n  const max = useSelector(selectMax);\r\n\r\n  const formik = useFormik<{ expression: string; min: number; max: number }>({\r\n    initialValues: { expression: expression, min: min, max: max },\r\n    onSubmit: (values) => {\r\n      dispatch(calculate({ expression: values.expression, min: values.min, max: values.max }));\r\n    },\r\n    validate: (values) => {\r\n      const errors: { expression?: string; min?: string; max?: string } = {};\r\n      if (!values.expression) {\r\n        errors.expression = \"Must be not empty\";\r\n      }\r\n      if (!values.min && values.min !== 0) {\r\n        errors.min = \"Must be not empty\";\r\n      }\r\n      if (!values.max && values.max !== 0) {\r\n        errors.max = \"Must be not empty\";\r\n      }\r\n      if (values.min && values.max) {\r\n        if (values.min >= values.max) {\r\n          errors.max = \"Max must be more then min\";\r\n        }\r\n      }\r\n      return errors;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <form\r\n        className={classes.root}\r\n        id=\"calculator-form-id\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={formik.handleSubmit}\r\n      >\r\n        <div>\r\n          <TextField\r\n            id=\"id-expression\"\r\n            name=\"expression\"\r\n            required\r\n            label=\"Expression\"\r\n            value={formik.values.expression}\r\n            onChange={formik.handleChange}\r\n            error={formik.errors.expression ? true : false}\r\n            helperText={formik.errors.expression}\r\n          />\r\n          <div>\r\n            <TextField\r\n              id=\"id-min\"\r\n              name=\"min\"\r\n              required\r\n              label=\"Min\"\r\n              value={formik.values.min}\r\n              onChange={formik.handleChange}\r\n              error={formik.errors.min ? true : false}\r\n              helperText={formik.errors.min}\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              id=\"id-max\"\r\n              name=\"max\"\r\n              required\r\n              label=\"Max\"\r\n              value={formik.values.max}\r\n              onChange={formik.handleChange}\r\n              error={formik.errors.max ? true : false}\r\n              helperText={formik.errors.max}\r\n              type=\"number\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n          Plot\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import ParserImpl from \"../../common/Parser\";\r\n\r\nexport default class Graph {\r\n  ctx: CanvasRenderingContext2D;\r\n  canvasWidth: number;\r\n  canvasHeigth: number;\r\n  graphWidth: number;\r\n  graphHeigth: number;\r\n  scaleX: number = 1;\r\n  scaleY: number = 1;\r\n\r\n  constructor(width: number, heigth: number) {\r\n    this.canvasWidth = width;\r\n    this.canvasHeigth = heigth;\r\n    this.graphWidth = width * 0.8;\r\n    this.graphHeigth = heigth * 0.8;\r\n  }\r\n\r\n  setCanvas(canvas: HTMLCanvasElement) {\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.ctx.fillStyle = \"#000000\";\r\n    this._drawAxis();\r\n  }\r\n\r\n  _convertXY(x: number, y: number): [number, number] {\r\n    const canvasX = this.canvasWidth / 2 + x * this.scaleX;\r\n    const canvasY = this.canvasHeigth / 2 - y * this.scaleY;\r\n    return [canvasX, canvasY];\r\n  }\r\n\r\n  _drawAxis(min?, max?) {\r\n    // X\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(0, this.canvasHeigth / 2);\r\n    this.ctx.lineTo(this.canvasWidth, this.canvasHeigth / 2);\r\n    this.ctx.stroke();\r\n\r\n    const markerLength = 3;\r\n    this.ctx.font = \"14px serif\";\r\n\r\n    let rigthMarkerX = this.canvasWidth / 2 + this.graphWidth / 2;\r\n    let leftMarkerX = this.canvasWidth / 2 - this.graphWidth / 2;\r\n    const rigthMarkerY = this.canvasHeigth / 2;\r\n    const leftMarkerY = this.canvasHeigth / 2;\r\n    let leftMarkerText = min;\r\n    let rightMarkerText = max;\r\n\r\n    if (Math.abs(min) < Math.abs(max)) {\r\n      rigthMarkerX = this.canvasWidth / 2 + (this.graphWidth / 2) * (min / max);\r\n      leftMarkerX = this.canvasWidth / 2 + this.graphWidth / 2;\r\n      leftMarkerText = max;\r\n      rightMarkerText = min;\r\n    } else if (Math.abs(min) > Math.abs(max)) {\r\n      rigthMarkerX = this.canvasWidth / 2 - (this.graphWidth / 2) * (max / min);\r\n      leftMarkerX = this.canvasWidth / 2 - this.graphWidth / 2;\r\n    }\r\n\r\n    // right marker\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(rigthMarkerX, rigthMarkerY - markerLength);\r\n    this.ctx.lineTo(rigthMarkerX, rigthMarkerY + markerLength);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.fillText(rightMarkerText, rigthMarkerX + 2, rigthMarkerY + 15);\r\n\r\n    // left marker\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(leftMarkerX, leftMarkerY - markerLength);\r\n    this.ctx.lineTo(leftMarkerX, leftMarkerY + markerLength);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.fillText(leftMarkerText, leftMarkerX + 2, leftMarkerY + 15);\r\n\r\n    // Y\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.canvasWidth / 2, 0);\r\n    this.ctx.lineTo(this.canvasWidth / 2, this.canvasHeigth);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  plot(expression: string, min: number, max: number) {\r\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeigth);\r\n\r\n    const parser: ParserImpl = new ParserImpl();\r\n    const maxX = Math.max(Math.abs(min), Math.abs(max));\r\n    const step: number = maxX / this.graphWidth;\r\n    this.scaleX = this.graphWidth / 2 / maxX;\r\n\r\n    // calculate points\r\n    const coordinates = [];\r\n\r\n    let maxY = 0;\r\n    for (let x: number = min; x <= max; x = x + step) {\r\n      const y = parser.evaluate(expression, [{ name: \"x\", value: x }]);\r\n      coordinates.push({ x, y });\r\n      maxY = Math.max(maxY, Math.abs(y));\r\n    }\r\n\r\n    const newCoordinates = this._cutBreakpoint(coordinates, maxY);\r\n\r\n    maxY = 0;\r\n    newCoordinates.map((value) => {\r\n      if (value.y !== undefined) {\r\n        maxY = Math.max(maxY, Math.abs(value.y));\r\n      }\r\n    });\r\n\r\n    this.scaleY = this.scaleX;\r\n\r\n    // draw\r\n    this.ctx.beginPath();\r\n\r\n    newCoordinates.map((value) => {\r\n      if (value.y !== undefined) {\r\n        const [canvasX, canvasY] = this._convertXY(value.x, value.y);\r\n        this.ctx.lineTo(canvasX, canvasY);\r\n      } else {\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n      }\r\n    });\r\n\r\n    this.ctx.stroke();\r\n\r\n    this._drawAxis(min, max);\r\n  }\r\n\r\n  _cutBreakpoint(coordinates: Array<{ x: number; y: number }>, maxY): Array<{ x; y }> {\r\n    const newCoordinates = coordinates.slice();\r\n\r\n    coordinates.map((value, index, elements) => {\r\n      if (maxY === Math.abs(value.y)) {\r\n        for (let i = 0; i < 5; i++) {\r\n          if (elements[index + i]) {\r\n            elements[index + i].y = undefined;\r\n          }\r\n          if (elements[index - i]) {\r\n            elements[index - i].y = undefined;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return newCoordinates;\r\n  }\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport Graph from \"./Graph\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectExpression, selectMax, selectMin } from \"../calculator/calculatorSlice\";\r\n\r\nexport const Graphic = () => {\r\n  const canvasRef = useRef(null);\r\n  const canvasHeigth = 400;\r\n  const canvasWidth = 400;\r\n  let graph: Graph = new Graph(canvasWidth, canvasHeigth);\r\n  const expression = useSelector(selectExpression);\r\n  const min = useSelector(selectMin);\r\n  const max = useSelector(selectMax);\r\n\r\n  useEffect(() => {\r\n    if (expression) {\r\n      graph.setCanvas(canvasRef.current);\r\n      graph.plot(expression, min, max);\r\n    }\r\n  }, [expression, min, max]);\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\" }}>\r\n      <canvas ref={canvasRef} width={canvasWidth} height={canvasHeigth} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectExpression, selectMax, selectMin } from \"../calculator/calculatorSlice\";\r\nimport { getGraph } from \"./api/Wolfram\";\r\nimport { WolframResponeDto } from \"./api/WolframResponse\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst WolframPlot = () => {\r\n  const expression = useSelector(selectExpression);\r\n  const min = useSelector(selectMin);\r\n  const max = useSelector(selectMax);\r\n  const [wolframResult, setWolframResult] = useState<WolframResponeDto>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let cleanupFunction = false;\r\n    if (expression) {\r\n      setIsLoading(true);\r\n      setError(\"\");\r\n      setWolframResult(null);\r\n      getGraph(`${expression}, x = ${min} to ${max}`)\r\n        .then((result) => {\r\n          if (!cleanupFunction) {\r\n            setWolframResult(result);\r\n          }\r\n        })\r\n        .catch((reason) => {\r\n          if (reason.response) {\r\n            setError(reason.response.data);\r\n          } else {\r\n            setError(reason.message);\r\n          }\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n    return () => (cleanupFunction = true);\r\n  }, [expression, min, max]);\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\" }}>\r\n      {isLoading ? <CircularProgress /> : null}\r\n      {error ? <Alert severity=\"error\">{error}</Alert> : null}\r\n      {wolframResult ? (\r\n        <img\r\n          src={wolframResult.imgSrc}\r\n          width={wolframResult.imgWidth}\r\n          height={wolframResult.imgHeigth}\r\n          alt=\"Plot\"\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WolframPlot;\r\n","import { WolframResponeDto } from \"./WolframResponse\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://wolfram-api.herokuapp.com\";\r\n\r\nexport const getGraph = (expression: string): Promise<WolframResponeDto> => {\r\n  const url = `${API_URL}/plot/`;\r\n\r\n  return axios.get(url, { params: { expression: expression } }).then((response) => response.data);\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Calculator } from \"./features/calculator/Calculator\";\r\nimport { changeCalculator, selectCalcType } from \"./features/calculator/calculatorSlice\";\r\nimport { Graphic } from \"./features/graphic/Graphic\";\r\nimport WolframPlot from \"./features/wolfram/WolframPlot\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const calcType = useSelector(selectCalcType);\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(changeCalculator((event.target as HTMLInputElement).value));\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Calculator type</FormLabel>\r\n        <RadioGroup aria-label=\"gender\" name=\"gender1\" value={calcType} onChange={handleChange}>\r\n          <FormControlLabel value=\"custom\" control={<Radio />} label=\"Custom\" />\r\n          <FormControlLabel value=\"wolfram\" control={<Radio />} label=\"Wolfram\" />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <Calculator />\r\n      {calcType === \"custom\" ? <Graphic /> : <WolframPlot />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport calculatorReducer from '../features/calculator/calculatorSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    calculator: calculatorReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"fontsource-roboto\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}